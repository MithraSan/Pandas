# -*- coding: utf-8 -*-
"""pandas_codeipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o0fNG4_ecNfhE_21je8X__Y9T4wS_9SX

# **`PANDAS PRACTICES:`**

# **STEP:1 Import the pandas packages and check the version of pandas**
"""

import numpy as np
import pandas as pd
print(pd.__version__)

"""# **STEP:2 UPLOAD THE FILES**"""

#FILES UPLOADING FORMAT
from google.colab import files
data=files.upload()
# DATASET SOURCE LINK: 'https://www.kaggle.com/datasets/akshaydattatraykhare/diabetes-dataset'






0

"""# **STEP3: Read the entire dataset**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df=pd.read_csv('diabetes.csv')
print(df)

"""# **STEP:4 Display the entire dataset**"""

print(df.to_string())

"""# **It shows the maximum rows**"""

import pandas as pd

print(pd.options.display.max_rows)

pd.options.display.max_rows = 9999

df = pd.read_csv('diabetes.csv')

print(df)

"""## **We can specify to print the top 5 rows on the dataset"""

print(df.head(10))

"""# **We can specify, it only the return the bottom of specified rows**"""

print(df.tail())

"""# **STEP:5 CLEANING THE DATASET**
 The dropna() method returns a new DataFrame, and will not change the original.
"""

new_df = df.dropna()

print(new_df.to_string())

"""# **CHANGING THE ORIGINAL DATA FRAME**
The dropna(inplace = True) will NOT return a new DataFrame, but it will remove all rows containing NULL values from the original DataFrame.
"""

df.dropna(inplace = True)

print(df.to_string())  #It can display the entire dataset

"""# **CHECK THE NULL VALUES**"""

df.isnull() # THERE IS NO NULL VALUES IN THE DATASET, SO DON'T REPLACE THE NULL VALUES
if any null values are there, then we use the "fillna"(to replace the null values on the dataset)

"""# **STEP:5 FIND THE MEAN FOR ENTIRE COLUMN ON THE DATASET**"""

print(df.mean())

"""# **STEP:6 FIND THE MODE FOR ENTIRE COLUMN ON THE DATASET**"""

print(df.mode())

"""# **STEP:7 FIND THE MEDIAN FOR ENTIRE COLUMN ON THE DATASET**

"""

print(df.median())

"""# **Check the median values for some specific columns **"""

x = df["Age"].median()
print(x)

y=df.dropna(subset=['Age'], inplace = True) #there is no null values to remove so, It can return the None
print(y)

print(df.duplicated()) #we can check if there is any duplicate values?

c=df.drop_duplicates(inplace = True) # there is no duplicate values so, it can return the NONE
print(c)

"""# **STEP:8 FIND THE CORRELATION FOR THE DATASET**
This is the final step on the PANDAS packages:
The corr used to find the relationship of the data.
It consists 3 set of values
   #1 --> It contains perfect consistent relationship
  #0.9-->  It contains good consistent relationship
  #0.02--> It contains bad consistent relationship
  #(-)--> It contains sometimes poor correlation
"""

df.corr()